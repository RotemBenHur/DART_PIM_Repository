#include <fstream>
#include <iostream>
#include "sw.h"
#include "utility.h"

struct int3{
    int x, y, z;
};

// Utility function to find the minimum of three numbers
int min(int x, int y, int z) { return std::min(std::min(x, y), z); }

int editDistance(const char* s, const std::string& t){
	
	//std::cout << "SW: inside ED! " << std::endl;
	
	if (!COMPARISON_MODE) return 0;
	
	// s is of length N, t is of length N + 2 * ETH
	
	const char* tc = t.c_str();
	
    //int ETH = 6;
    int sat = 7;
	
    int ED[2 * ETH + 1];
    for(int i = 0; i < 2 * ETH + 1; i++) ED[i] = std::min(0, i - ETH + 1);
	
    for(int i = 0; i < N; i++){
        for(int j = 0; j < 2 * ETH + 1; j++){
            if (j == 0) ED[j] = std::min(ED[j] + (s[i] != tc[i + j]), ED[j + 1] + 1);
            else if(j == 2 * ETH) ED[j] = std::min(ED[j] + (s[i] != tc[i + j]), ED[j - 1] + 1);
            else ED[j] = min(ED[j] + (s[i] != tc[i + j]), ED[j - 1] + 1, ED[j + 1] + 1);
            ED[j] = std::min(ED[j], sat);
        }
    }
	
    int res = sat;
    for(int i = ETH; i < 2 * ETH + 1; i++) res = std::min(res, ED[i]);
	//std::cout << "SW: e = " << res << std::endl;
    return res;

	//return 0;

}

int affineEditDistance(const char* s, const std::string& t) {

    //std::cout << "SW: inside ED affine! " << std::endl;
	
	if (!COMPARISON_MODE) return 0;
	
	const char* tc = t.c_str();
	
	//int ETH = 6;
    int sat = 63;
    int wopen = 6;
    int wext = 1;
    int wsub = 5;

    int ED[2 * ETH + 1];
    int Ms[2 * ETH + 1];
    int Mt[2 * ETH + 1];
    for(int i = 0; i < 2 * ETH + 1; i++) {
        Ms[i] = sat;
        Mt[i] = std::min(0, (i - ETH + 1) * wext + wsub);
        ED[i] = std::min(Ms[i], Mt[i]);
    }
	
	

    for(int i = 0; i < N; i++){
        for(int j = 0; j < 2 * ETH + 1; j++){

            if (j == 0){
                Ms[j] = std::min(Ms[j + 1] + wext, ED[j + 1] + wopen + wext);
                Mt[j] = sat;
                ED[j] = min(ED[j] + (s[i] != tc[i + j]) * wsub, Ms[j], Mt[j]);
            }
            else if(j == 2 * ETH){
                Ms[j] = sat;
                Mt[j] = std::min(Mt[j - 1] + wext, ED[j - 1] + wopen + wext);
                ED[j] = min(ED[j] + (s[i] != tc[i + j]) * wsub, Ms[j], Mt[j]);
            }

            else{
                Ms[j] = std::min(Ms[j + 1] + wext, ED[j + 1] + wopen + wext);
                Mt[j] = std::min(Mt[j - 1] + wext, ED[j - 1] + wopen + wext);
                ED[j] = min(ED[j] + (s[i] != tc[i + j]) * wsub, Ms[j], Mt[j]);
            }

            Ms[j] = std::min(Ms[j], sat);
            Mt[j] = std::min(Mt[j], sat);
            ED[j] = std::min(ED[j], sat);
        }
    }

    int res = sat;
    for(int i = ETH; i < 2 * ETH + 1; i++) res = std::min(res, ED[i]);
    //std::cout << "SW affine: e = " << res << std::endl;
	return res;

}

//int affineSmithWaterman(const char* s, const std::string& t) {
//
//    std::cout << "SW: inside SW affine! " << std::endl;
//	
//	int res = 0;
//		
//	return res;
//
//}

int affineSmithWaterman(const char *s, const std::string& t) {
	
	//std::cout << "SW: inside SW affine! " << std::endl;
	
	const char* tc = t.c_str();
	
    int3 arr[13];
    int best = 0;
    arr[0].x = 0;
    arr[0].y = 0;
    arr[0].z = std::max((((int)(s[0] == tc[0])) * 5 - 4), 0);
    best = std::max(best, arr[0].z);
    arr[1].x = std::max(std::max(arr[0].x - 1, arr[0].z - 7), 0);
    arr[1].y = 0;
    arr[1].z = std::max((((int)(s[0] == tc[1])) * 5 - 4), arr[1].x);
    best = std::max(best, arr[1].z);
    arr[2].x = std::max(std::max(arr[1].x - 1, arr[1].z - 7), 0);
    arr[2].y = 0;
    arr[2].z = std::max((((int)(s[0] == tc[2])) * 5 - 4), arr[2].x);
    best = std::max(best, arr[2].z);
    arr[3].x = std::max(std::max(arr[2].x - 1, arr[2].z - 7), 0);
    arr[3].y = 0;
    arr[3].z = std::max((((int)(s[0] == tc[3])) * 5 - 4), arr[3].x);
    best = std::max(best, arr[3].z);
    arr[4].x = std::max(std::max(arr[3].x - 1, arr[3].z - 7), 0);
    arr[4].y = 0;
    arr[4].z = std::max((((int)(s[0] == tc[4])) * 5 - 4), arr[4].x);
    best = std::max(best, arr[4].z);
    arr[5].x = std::max(std::max(arr[4].x - 1, arr[4].z - 7), 0);
    arr[5].y = 0;
    arr[5].z = std::max((((int)(s[0] == tc[5])) * 5 - 4), arr[5].x);
    best = std::max(best, arr[5].z);
    arr[6].x = std::max(std::max(arr[5].x - 1, arr[5].z - 7), 0);
    arr[6].y = 0;
    arr[6].z = std::max((((int)(s[0] == tc[6])) * 5 - 4), arr[6].x);
    best = std::max(best, arr[6].z);
    arr[7].x = std::max(std::max(arr[6].x - 1, arr[6].z - 7), 0);
    arr[7].y = 0;
    arr[7].z = std::max((((int)(s[0] == tc[7])) * 5 - 4), arr[7].x);
    best = std::max(best, arr[7].z);
    arr[8].x = std::max(std::max(arr[7].x - 1, arr[7].z - 7), 0);
    arr[8].y = 0;
    arr[8].z = std::max((((int)(s[0] == tc[8])) * 5 - 4), arr[8].x);
    best = std::max(best, arr[8].z);
    arr[9].x = std::max(std::max(arr[8].x - 1, arr[8].z - 7), 0);
    arr[9].y = 0;
    arr[9].z = std::max((((int)(s[0] == tc[9])) * 5 - 4), arr[9].x);
    best = std::max(best, arr[9].z);
    arr[10].x = std::max(std::max(arr[9].x - 1, arr[9].z - 7), 0);
    arr[10].y = 0;
    arr[10].z = std::max((((int)(s[0] == tc[10])) * 5 - 4), arr[10].x);
    best = std::max(best, arr[10].z);
    arr[11].x = std::max(std::max(arr[10].x - 1, arr[10].z - 7), 0);
    arr[11].y = 0;
    arr[11].z = std::max((((int)(s[0] == tc[11])) * 5 - 4), arr[11].x);
    best = std::max(best, arr[11].z);
    arr[12].x = std::max(std::max(arr[11].x - 1, arr[11].z - 7), 0);
    arr[12].y = 0;
    arr[12].z = std::max((((int)(s[0] == tc[12])) * 5 - 4), arr[12].x);
    best = std::max(best, arr[12].z);
    s++;
    tc++;
    for(int i = 0; i < 24; i++){
        arr[0].x = 0;
        arr[0].y = std::max(std::max(arr[1].y - 1, arr[1].z - 7), 0);
        arr[0].z = std::max(arr[0].z + (((int)(s[0] == tc[0])) * 5 - 4), arr[0].y);
        best = std::max(best, arr[0].z);
        arr[1].x = std::max(std::max(arr[0].x - 1, arr[0].z - 7), 0);
        arr[1].y = std::max(std::max(arr[2].y - 1, arr[2].z - 7), 0);
        arr[1].z = std::max(arr[1].z + (((int)(s[0] == tc[1])) * 5 - 4), std::max(arr[1].y, arr[1].x));
        best = std::max(best, arr[1].z);
        arr[2].x = std::max(std::max(arr[1].x - 1, arr[1].z - 7), 0);
        arr[2].y = std::max(std::max(arr[3].y - 1, arr[3].z - 7), 0);
        arr[2].z = std::max(arr[2].z + (((int)(s[0] == tc[2])) * 5 - 4), std::max(arr[2].y, arr[2].x));
        best = std::max(best, arr[2].z);
        arr[3].x = std::max(std::max(arr[2].x - 1, arr[2].z - 7), 0);
        arr[3].y = std::max(std::max(arr[4].y - 1, arr[4].z - 7), 0);
        arr[3].z = std::max(arr[3].z + (((int)(s[0] == tc[3])) * 5 - 4), std::max(arr[3].y, arr[3].x));
        best = std::max(best, arr[3].z);
        arr[4].x = std::max(std::max(arr[3].x - 1, arr[3].z - 7), 0);
        arr[4].y = std::max(std::max(arr[5].y - 1, arr[5].z - 7), 0);
        arr[4].z = std::max(arr[4].z + (((int)(s[0] == tc[4])) * 5 - 4), std::max(arr[4].y, arr[4].x));
        best = std::max(best, arr[4].z);
        arr[5].x = std::max(std::max(arr[4].x - 1, arr[4].z - 7), 0);
        arr[5].y = std::max(std::max(arr[6].y - 1, arr[6].z - 7), 0);
        arr[5].z = std::max(arr[5].z + (((int)(s[0] == tc[5])) * 5 - 4), std::max(arr[5].y, arr[5].x));
        best = std::max(best, arr[5].z);
        arr[6].x = std::max(std::max(arr[5].x - 1, arr[5].z - 7), 0);
        arr[6].y = std::max(std::max(arr[7].y - 1, arr[7].z - 7), 0);
        arr[6].z = std::max(arr[6].z + (((int)(s[0] == tc[6])) * 5 - 4), std::max(arr[6].y, arr[6].x));
        best = std::max(best, arr[6].z);
        arr[7].x = std::max(std::max(arr[6].x - 1, arr[6].z - 7), 0);
        arr[7].y = std::max(std::max(arr[8].y - 1, arr[8].z - 7), 0);
        arr[7].z = std::max(arr[7].z + (((int)(s[0] == tc[7])) * 5 - 4), std::max(arr[7].y, arr[7].x));
        best = std::max(best, arr[7].z);
        arr[8].x = std::max(std::max(arr[7].x - 1, arr[7].z - 7), 0);
        arr[8].y = std::max(std::max(arr[9].y - 1, arr[9].z - 7), 0);
        arr[8].z = std::max(arr[8].z + (((int)(s[0] == tc[8])) * 5 - 4), std::max(arr[8].y, arr[8].x));
        best = std::max(best, arr[8].z);
        arr[9].x = std::max(std::max(arr[8].x - 1, arr[8].z - 7), 0);
        arr[9].y = std::max(std::max(arr[10].y - 1, arr[10].z - 7), 0);
        arr[9].z = std::max(arr[9].z + (((int)(s[0] == tc[9])) * 5 - 4), std::max(arr[9].y, arr[9].x));
        best = std::max(best, arr[9].z);
        arr[10].x = std::max(std::max(arr[9].x - 1, arr[9].z - 7), 0);
        arr[10].y = std::max(std::max(arr[11].y - 1, arr[11].z - 7), 0);
        arr[10].z = std::max(arr[10].z + (((int)(s[0] == tc[10])) * 5 - 4), std::max(arr[10].y, arr[10].x));
        best = std::max(best, arr[10].z);
        arr[11].x = std::max(std::max(arr[10].x - 1, arr[10].z - 7), 0);
        arr[11].y = std::max(std::max(arr[12].y - 1, arr[12].z - 7), 0);
        arr[11].z = std::max(arr[11].z + (((int)(s[0] == tc[11])) * 5 - 4), std::max(arr[11].y, arr[11].x));
        best = std::max(best, arr[11].z);
        arr[12].x = std::max(std::max(arr[11].x - 1, arr[11].z - 7), 0);
        arr[12].y = 0;
        arr[12].z = std::max(arr[12].z + (((int)(s[0] == tc[12])) * 5 - 4), std::max(arr[12].y, arr[12].x));
        best = std::max(best, arr[12].z);
        arr[0].x = 0;
        arr[0].y = std::max(std::max(arr[1].y - 1, arr[1].z - 7), 0);
        arr[0].z = std::max(arr[0].z + (((int)(s[1] == tc[1])) * 5 - 4), arr[0].y);
        best = std::max(best, arr[0].z);
        arr[1].x = std::max(std::max(arr[0].x - 1, arr[0].z - 7), 0);
        arr[1].y = std::max(std::max(arr[2].y - 1, arr[2].z - 7), 0);
        arr[1].z = std::max(arr[1].z + (((int)(s[1] == tc[2])) * 5 - 4), std::max(arr[1].y, arr[1].x));
        best = std::max(best, arr[1].z);
        arr[2].x = std::max(std::max(arr[1].x - 1, arr[1].z - 7), 0);
        arr[2].y = std::max(std::max(arr[3].y - 1, arr[3].z - 7), 0);
        arr[2].z = std::max(arr[2].z + (((int)(s[1] == tc[3])) * 5 - 4), std::max(arr[2].y, arr[2].x));
        best = std::max(best, arr[2].z);
        arr[3].x = std::max(std::max(arr[2].x - 1, arr[2].z - 7), 0);
        arr[3].y = std::max(std::max(arr[4].y - 1, arr[4].z - 7), 0);
        arr[3].z = std::max(arr[3].z + (((int)(s[1] == tc[4])) * 5 - 4), std::max(arr[3].y, arr[3].x));
        best = std::max(best, arr[3].z);
        arr[4].x = std::max(std::max(arr[3].x - 1, arr[3].z - 7), 0);
        arr[4].y = std::max(std::max(arr[5].y - 1, arr[5].z - 7), 0);
        arr[4].z = std::max(arr[4].z + (((int)(s[1] == tc[5])) * 5 - 4), std::max(arr[4].y, arr[4].x));
        best = std::max(best, arr[4].z);
        arr[5].x = std::max(std::max(arr[4].x - 1, arr[4].z - 7), 0);
        arr[5].y = std::max(std::max(arr[6].y - 1, arr[6].z - 7), 0);
        arr[5].z = std::max(arr[5].z + (((int)(s[1] == tc[6])) * 5 - 4), std::max(arr[5].y, arr[5].x));
        best = std::max(best, arr[5].z);
        arr[6].x = std::max(std::max(arr[5].x - 1, arr[5].z - 7), 0);
        arr[6].y = std::max(std::max(arr[7].y - 1, arr[7].z - 7), 0);
        arr[6].z = std::max(arr[6].z + (((int)(s[1] == tc[7])) * 5 - 4), std::max(arr[6].y, arr[6].x));
        best = std::max(best, arr[6].z);
        arr[7].x = std::max(std::max(arr[6].x - 1, arr[6].z - 7), 0);
        arr[7].y = std::max(std::max(arr[8].y - 1, arr[8].z - 7), 0);
        arr[7].z = std::max(arr[7].z + (((int)(s[1] == tc[8])) * 5 - 4), std::max(arr[7].y, arr[7].x));
        best = std::max(best, arr[7].z);
        arr[8].x = std::max(std::max(arr[7].x - 1, arr[7].z - 7), 0);
        arr[8].y = std::max(std::max(arr[9].y - 1, arr[9].z - 7), 0);
        arr[8].z = std::max(arr[8].z + (((int)(s[1] == tc[9])) * 5 - 4), std::max(arr[8].y, arr[8].x));
        best = std::max(best, arr[8].z);
        arr[9].x = std::max(std::max(arr[8].x - 1, arr[8].z - 7), 0);
        arr[9].y = std::max(std::max(arr[10].y - 1, arr[10].z - 7), 0);
        arr[9].z = std::max(arr[9].z + (((int)(s[1] == tc[10])) * 5 - 4), std::max(arr[9].y, arr[9].x));
        best = std::max(best, arr[9].z);
        arr[10].x = std::max(std::max(arr[9].x - 1, arr[9].z - 7), 0);
        arr[10].y = std::max(std::max(arr[11].y - 1, arr[11].z - 7), 0);
        arr[10].z = std::max(arr[10].z + (((int)(s[1] == tc[11])) * 5 - 4), std::max(arr[10].y, arr[10].x));
        best = std::max(best, arr[10].z);
        arr[11].x = std::max(std::max(arr[10].x - 1, arr[10].z - 7), 0);
        arr[11].y = std::max(std::max(arr[12].y - 1, arr[12].z - 7), 0);
        arr[11].z = std::max(arr[11].z + (((int)(s[1] == tc[12])) * 5 - 4), std::max(arr[11].y, arr[11].x));
        best = std::max(best, arr[11].z);
        arr[12].x = std::max(std::max(arr[11].x - 1, arr[11].z - 7), 0);
        arr[12].y = 0;
        arr[12].z = std::max(arr[12].z + (((int)(s[1] == tc[13])) * 5 - 4), std::max(arr[12].y, arr[12].x));
        best = std::max(best, arr[12].z);
        arr[0].x = 0;
        arr[0].y = std::max(std::max(arr[1].y - 1, arr[1].z - 7), 0);
        arr[0].z = std::max(arr[0].z + (((int)(s[2] == tc[2])) * 5 - 4), arr[0].y);
        best = std::max(best, arr[0].z);
        arr[1].x = std::max(std::max(arr[0].x - 1, arr[0].z - 7), 0);
        arr[1].y = std::max(std::max(arr[2].y - 1, arr[2].z - 7), 0);
        arr[1].z = std::max(arr[1].z + (((int)(s[2] == tc[3])) * 5 - 4), std::max(arr[1].y, arr[1].x));
        best = std::max(best, arr[1].z);
        arr[2].x = std::max(std::max(arr[1].x - 1, arr[1].z - 7), 0);
        arr[2].y = std::max(std::max(arr[3].y - 1, arr[3].z - 7), 0);
        arr[2].z = std::max(arr[2].z + (((int)(s[2] == tc[4])) * 5 - 4), std::max(arr[2].y, arr[2].x));
        best = std::max(best, arr[2].z);
        arr[3].x = std::max(std::max(arr[2].x - 1, arr[2].z - 7), 0);
        arr[3].y = std::max(std::max(arr[4].y - 1, arr[4].z - 7), 0);
        arr[3].z = std::max(arr[3].z + (((int)(s[2] == tc[5])) * 5 - 4), std::max(arr[3].y, arr[3].x));
        best = std::max(best, arr[3].z);
        arr[4].x = std::max(std::max(arr[3].x - 1, arr[3].z - 7), 0);
        arr[4].y = std::max(std::max(arr[5].y - 1, arr[5].z - 7), 0);
        arr[4].z = std::max(arr[4].z + (((int)(s[2] == tc[6])) * 5 - 4), std::max(arr[4].y, arr[4].x));
        best = std::max(best, arr[4].z);
        arr[5].x = std::max(std::max(arr[4].x - 1, arr[4].z - 7), 0);
        arr[5].y = std::max(std::max(arr[6].y - 1, arr[6].z - 7), 0);
        arr[5].z = std::max(arr[5].z + (((int)(s[2] == tc[7])) * 5 - 4), std::max(arr[5].y, arr[5].x));
        best = std::max(best, arr[5].z);
        arr[6].x = std::max(std::max(arr[5].x - 1, arr[5].z - 7), 0);
        arr[6].y = std::max(std::max(arr[7].y - 1, arr[7].z - 7), 0);
        arr[6].z = std::max(arr[6].z + (((int)(s[2] == tc[8])) * 5 - 4), std::max(arr[6].y, arr[6].x));
        best = std::max(best, arr[6].z);
        arr[7].x = std::max(std::max(arr[6].x - 1, arr[6].z - 7), 0);
        arr[7].y = std::max(std::max(arr[8].y - 1, arr[8].z - 7), 0);
        arr[7].z = std::max(arr[7].z + (((int)(s[2] == tc[9])) * 5 - 4), std::max(arr[7].y, arr[7].x));
        best = std::max(best, arr[7].z);
        arr[8].x = std::max(std::max(arr[7].x - 1, arr[7].z - 7), 0);
        arr[8].y = std::max(std::max(arr[9].y - 1, arr[9].z - 7), 0);
        arr[8].z = std::max(arr[8].z + (((int)(s[2] == tc[10])) * 5 - 4), std::max(arr[8].y, arr[8].x));
        best = std::max(best, arr[8].z);
        arr[9].x = std::max(std::max(arr[8].x - 1, arr[8].z - 7), 0);
        arr[9].y = std::max(std::max(arr[10].y - 1, arr[10].z - 7), 0);
        arr[9].z = std::max(arr[9].z + (((int)(s[2] == tc[11])) * 5 - 4), std::max(arr[9].y, arr[9].x));
        best = std::max(best, arr[9].z);
        arr[10].x = std::max(std::max(arr[9].x - 1, arr[9].z - 7), 0);
        arr[10].y = std::max(std::max(arr[11].y - 1, arr[11].z - 7), 0);
        arr[10].z = std::max(arr[10].z + (((int)(s[2] == tc[12])) * 5 - 4), std::max(arr[10].y, arr[10].x));
        best = std::max(best, arr[10].z);
        arr[11].x = std::max(std::max(arr[10].x - 1, arr[10].z - 7), 0);
        arr[11].y = std::max(std::max(arr[12].y - 1, arr[12].z - 7), 0);
        arr[11].z = std::max(arr[11].z + (((int)(s[2] == tc[13])) * 5 - 4), std::max(arr[11].y, arr[11].x));
        best = std::max(best, arr[11].z);
        arr[12].x = std::max(std::max(arr[11].x - 1, arr[11].z - 7), 0);
        arr[12].y = 0;
        arr[12].z = std::max(arr[12].z + (((int)(s[2] == tc[14])) * 5 - 4), std::max(arr[12].y, arr[12].x));
        best = std::max(best, arr[12].z);
        arr[0].x = 0;
        arr[0].y = std::max(std::max(arr[1].y - 1, arr[1].z - 7), 0);
        arr[0].z = std::max(arr[0].z + (((int)(s[3] == tc[3])) * 5 - 4), arr[0].y);
        best = std::max(best, arr[0].z);
        arr[1].x = std::max(std::max(arr[0].x - 1, arr[0].z - 7), 0);
        arr[1].y = std::max(std::max(arr[2].y - 1, arr[2].z - 7), 0);
        arr[1].z = std::max(arr[1].z + (((int)(s[3] == tc[4])) * 5 - 4), std::max(arr[1].y, arr[1].x));
        best = std::max(best, arr[1].z);
        arr[2].x = std::max(std::max(arr[1].x - 1, arr[1].z - 7), 0);
        arr[2].y = std::max(std::max(arr[3].y - 1, arr[3].z - 7), 0);
        arr[2].z = std::max(arr[2].z + (((int)(s[3] == tc[5])) * 5 - 4), std::max(arr[2].y, arr[2].x));
        best = std::max(best, arr[2].z);
        arr[3].x = std::max(std::max(arr[2].x - 1, arr[2].z - 7), 0);
        arr[3].y = std::max(std::max(arr[4].y - 1, arr[4].z - 7), 0);
        arr[3].z = std::max(arr[3].z + (((int)(s[3] == tc[6])) * 5 - 4), std::max(arr[3].y, arr[3].x));
        best = std::max(best, arr[3].z);
        arr[4].x = std::max(std::max(arr[3].x - 1, arr[3].z - 7), 0);
        arr[4].y = std::max(std::max(arr[5].y - 1, arr[5].z - 7), 0);
        arr[4].z = std::max(arr[4].z + (((int)(s[3] == tc[7])) * 5 - 4), std::max(arr[4].y, arr[4].x));
        best = std::max(best, arr[4].z);
        arr[5].x = std::max(std::max(arr[4].x - 1, arr[4].z - 7), 0);
        arr[5].y = std::max(std::max(arr[6].y - 1, arr[6].z - 7), 0);
        arr[5].z = std::max(arr[5].z + (((int)(s[3] == tc[8])) * 5 - 4), std::max(arr[5].y, arr[5].x));
        best = std::max(best, arr[5].z);
        arr[6].x = std::max(std::max(arr[5].x - 1, arr[5].z - 7), 0);
        arr[6].y = std::max(std::max(arr[7].y - 1, arr[7].z - 7), 0);
        arr[6].z = std::max(arr[6].z + (((int)(s[3] == tc[9])) * 5 - 4), std::max(arr[6].y, arr[6].x));
        best = std::max(best, arr[6].z);
        arr[7].x = std::max(std::max(arr[6].x - 1, arr[6].z - 7), 0);
        arr[7].y = std::max(std::max(arr[8].y - 1, arr[8].z - 7), 0);
        arr[7].z = std::max(arr[7].z + (((int)(s[3] == tc[10])) * 5 - 4), std::max(arr[7].y, arr[7].x));
        best = std::max(best, arr[7].z);
        arr[8].x = std::max(std::max(arr[7].x - 1, arr[7].z - 7), 0);
        arr[8].y = std::max(std::max(arr[9].y - 1, arr[9].z - 7), 0);
        arr[8].z = std::max(arr[8].z + (((int)(s[3] == tc[11])) * 5 - 4), std::max(arr[8].y, arr[8].x));
        best = std::max(best, arr[8].z);
        arr[9].x = std::max(std::max(arr[8].x - 1, arr[8].z - 7), 0);
        arr[9].y = std::max(std::max(arr[10].y - 1, arr[10].z - 7), 0);
        arr[9].z = std::max(arr[9].z + (((int)(s[3] == tc[12])) * 5 - 4), std::max(arr[9].y, arr[9].x));
        best = std::max(best, arr[9].z);
        arr[10].x = std::max(std::max(arr[9].x - 1, arr[9].z - 7), 0);
        arr[10].y = std::max(std::max(arr[11].y - 1, arr[11].z - 7), 0);
        arr[10].z = std::max(arr[10].z + (((int)(s[3] == tc[13])) * 5 - 4), std::max(arr[10].y, arr[10].x));
        best = std::max(best, arr[10].z);
        arr[11].x = std::max(std::max(arr[10].x - 1, arr[10].z - 7), 0);
        arr[11].y = std::max(std::max(arr[12].y - 1, arr[12].z - 7), 0);
        arr[11].z = std::max(arr[11].z + (((int)(s[3] == tc[14])) * 5 - 4), std::max(arr[11].y, arr[11].x));
        best = std::max(best, arr[11].z);
        arr[12].x = std::max(std::max(arr[11].x - 1, arr[11].z - 7), 0);
        arr[12].y = 0;
        arr[12].z = std::max(arr[12].z + (((int)(s[3] == tc[15])) * 5 - 4), std::max(arr[12].y, arr[12].x));
        best = std::max(best, arr[12].z);
        arr[0].x = 0;
        arr[0].y = std::max(std::max(arr[1].y - 1, arr[1].z - 7), 0);
        arr[0].z = std::max(arr[0].z + (((int)(s[4] == tc[4])) * 5 - 4), arr[0].y);
        best = std::max(best, arr[0].z);
        arr[1].x = std::max(std::max(arr[0].x - 1, arr[0].z - 7), 0);
        arr[1].y = std::max(std::max(arr[2].y - 1, arr[2].z - 7), 0);
        arr[1].z = std::max(arr[1].z + (((int)(s[4] == tc[5])) * 5 - 4), std::max(arr[1].y, arr[1].x));
        best = std::max(best, arr[1].z);
        arr[2].x = std::max(std::max(arr[1].x - 1, arr[1].z - 7), 0);
        arr[2].y = std::max(std::max(arr[3].y - 1, arr[3].z - 7), 0);
        arr[2].z = std::max(arr[2].z + (((int)(s[4] == tc[6])) * 5 - 4), std::max(arr[2].y, arr[2].x));
        best = std::max(best, arr[2].z);
        arr[3].x = std::max(std::max(arr[2].x - 1, arr[2].z - 7), 0);
        arr[3].y = std::max(std::max(arr[4].y - 1, arr[4].z - 7), 0);
        arr[3].z = std::max(arr[3].z + (((int)(s[4] == tc[7])) * 5 - 4), std::max(arr[3].y, arr[3].x));
        best = std::max(best, arr[3].z);
        arr[4].x = std::max(std::max(arr[3].x - 1, arr[3].z - 7), 0);
        arr[4].y = std::max(std::max(arr[5].y - 1, arr[5].z - 7), 0);
        arr[4].z = std::max(arr[4].z + (((int)(s[4] == tc[8])) * 5 - 4), std::max(arr[4].y, arr[4].x));
        best = std::max(best, arr[4].z);
        arr[5].x = std::max(std::max(arr[4].x - 1, arr[4].z - 7), 0);
        arr[5].y = std::max(std::max(arr[6].y - 1, arr[6].z - 7), 0);
        arr[5].z = std::max(arr[5].z + (((int)(s[4] == tc[9])) * 5 - 4), std::max(arr[5].y, arr[5].x));
        best = std::max(best, arr[5].z);
        arr[6].x = std::max(std::max(arr[5].x - 1, arr[5].z - 7), 0);
        arr[6].y = std::max(std::max(arr[7].y - 1, arr[7].z - 7), 0);
        arr[6].z = std::max(arr[6].z + (((int)(s[4] == tc[10])) * 5 - 4), std::max(arr[6].y, arr[6].x));
        best = std::max(best, arr[6].z);
        arr[7].x = std::max(std::max(arr[6].x - 1, arr[6].z - 7), 0);
        arr[7].y = std::max(std::max(arr[8].y - 1, arr[8].z - 7), 0);
        arr[7].z = std::max(arr[7].z + (((int)(s[4] == tc[11])) * 5 - 4), std::max(arr[7].y, arr[7].x));
        best = std::max(best, arr[7].z);
        arr[8].x = std::max(std::max(arr[7].x - 1, arr[7].z - 7), 0);
        arr[8].y = std::max(std::max(arr[9].y - 1, arr[9].z - 7), 0);
        arr[8].z = std::max(arr[8].z + (((int)(s[4] == tc[12])) * 5 - 4), std::max(arr[8].y, arr[8].x));
        best = std::max(best, arr[8].z);
        arr[9].x = std::max(std::max(arr[8].x - 1, arr[8].z - 7), 0);
        arr[9].y = std::max(std::max(arr[10].y - 1, arr[10].z - 7), 0);
        arr[9].z = std::max(arr[9].z + (((int)(s[4] == tc[13])) * 5 - 4), std::max(arr[9].y, arr[9].x));
        best = std::max(best, arr[9].z);
        arr[10].x = std::max(std::max(arr[9].x - 1, arr[9].z - 7), 0);
        arr[10].y = std::max(std::max(arr[11].y - 1, arr[11].z - 7), 0);
        arr[10].z = std::max(arr[10].z + (((int)(s[4] == tc[14])) * 5 - 4), std::max(arr[10].y, arr[10].x));
        best = std::max(best, arr[10].z);
        arr[11].x = std::max(std::max(arr[10].x - 1, arr[10].z - 7), 0);
        arr[11].y = std::max(std::max(arr[12].y - 1, arr[12].z - 7), 0);
        arr[11].z = std::max(arr[11].z + (((int)(s[4] == tc[15])) * 5 - 4), std::max(arr[11].y, arr[11].x));
        best = std::max(best, arr[11].z);
        arr[12].x = std::max(std::max(arr[11].x - 1, arr[11].z - 7), 0);
        arr[12].y = 0;
        arr[12].z = std::max(arr[12].z + (((int)(s[4] == tc[16])) * 5 - 4), std::max(arr[12].y, arr[12].x));
        best = std::max(best, arr[12].z);
        arr[0].x = 0;
        arr[0].y = std::max(std::max(arr[1].y - 1, arr[1].z - 7), 0);
        arr[0].z = std::max(arr[0].z + (((int)(s[5] == tc[5])) * 5 - 4), arr[0].y);
        best = std::max(best, arr[0].z);
        arr[1].x = std::max(std::max(arr[0].x - 1, arr[0].z - 7), 0);
        arr[1].y = std::max(std::max(arr[2].y - 1, arr[2].z - 7), 0);
        arr[1].z = std::max(arr[1].z + (((int)(s[5] == tc[6])) * 5 - 4), std::max(arr[1].y, arr[1].x));
        best = std::max(best, arr[1].z);
        arr[2].x = std::max(std::max(arr[1].x - 1, arr[1].z - 7), 0);
        arr[2].y = std::max(std::max(arr[3].y - 1, arr[3].z - 7), 0);
        arr[2].z = std::max(arr[2].z + (((int)(s[5] == tc[7])) * 5 - 4), std::max(arr[2].y, arr[2].x));
        best = std::max(best, arr[2].z);
        arr[3].x = std::max(std::max(arr[2].x - 1, arr[2].z - 7), 0);
        arr[3].y = std::max(std::max(arr[4].y - 1, arr[4].z - 7), 0);
        arr[3].z = std::max(arr[3].z + (((int)(s[5] == tc[8])) * 5 - 4), std::max(arr[3].y, arr[3].x));
        best = std::max(best, arr[3].z);
        arr[4].x = std::max(std::max(arr[3].x - 1, arr[3].z - 7), 0);
        arr[4].y = std::max(std::max(arr[5].y - 1, arr[5].z - 7), 0);
        arr[4].z = std::max(arr[4].z + (((int)(s[5] == tc[9])) * 5 - 4), std::max(arr[4].y, arr[4].x));
        best = std::max(best, arr[4].z);
        arr[5].x = std::max(std::max(arr[4].x - 1, arr[4].z - 7), 0);
        arr[5].y = std::max(std::max(arr[6].y - 1, arr[6].z - 7), 0);
        arr[5].z = std::max(arr[5].z + (((int)(s[5] == tc[10])) * 5 - 4), std::max(arr[5].y, arr[5].x));
        best = std::max(best, arr[5].z);
        arr[6].x = std::max(std::max(arr[5].x - 1, arr[5].z - 7), 0);
        arr[6].y = std::max(std::max(arr[7].y - 1, arr[7].z - 7), 0);
        arr[6].z = std::max(arr[6].z + (((int)(s[5] == tc[11])) * 5 - 4), std::max(arr[6].y, arr[6].x));
        best = std::max(best, arr[6].z);
        arr[7].x = std::max(std::max(arr[6].x - 1, arr[6].z - 7), 0);
        arr[7].y = std::max(std::max(arr[8].y - 1, arr[8].z - 7), 0);
        arr[7].z = std::max(arr[7].z + (((int)(s[5] == tc[12])) * 5 - 4), std::max(arr[7].y, arr[7].x));
        best = std::max(best, arr[7].z);
        arr[8].x = std::max(std::max(arr[7].x - 1, arr[7].z - 7), 0);
        arr[8].y = std::max(std::max(arr[9].y - 1, arr[9].z - 7), 0);
        arr[8].z = std::max(arr[8].z + (((int)(s[5] == tc[13])) * 5 - 4), std::max(arr[8].y, arr[8].x));
        best = std::max(best, arr[8].z);
        arr[9].x = std::max(std::max(arr[8].x - 1, arr[8].z - 7), 0);
        arr[9].y = std::max(std::max(arr[10].y - 1, arr[10].z - 7), 0);
        arr[9].z = std::max(arr[9].z + (((int)(s[5] == tc[14])) * 5 - 4), std::max(arr[9].y, arr[9].x));
        best = std::max(best, arr[9].z);
        arr[10].x = std::max(std::max(arr[9].x - 1, arr[9].z - 7), 0);
        arr[10].y = std::max(std::max(arr[11].y - 1, arr[11].z - 7), 0);
        arr[10].z = std::max(arr[10].z + (((int)(s[5] == tc[15])) * 5 - 4), std::max(arr[10].y, arr[10].x));
        best = std::max(best, arr[10].z);
        arr[11].x = std::max(std::max(arr[10].x - 1, arr[10].z - 7), 0);
        arr[11].y = std::max(std::max(arr[12].y - 1, arr[12].z - 7), 0);
        arr[11].z = std::max(arr[11].z + (((int)(s[5] == tc[16])) * 5 - 4), std::max(arr[11].y, arr[11].x));
        best = std::max(best, arr[11].z);
        arr[12].x = std::max(std::max(arr[11].x - 1, arr[11].z - 7), 0);
        arr[12].y = 0;
        arr[12].z = std::max(arr[12].z + (((int)(s[5] == tc[17])) * 5 - 4), std::max(arr[12].y, arr[12].x));
        best = std::max(best, arr[12].z);
        s += 6;
        tc += 6;
    }
    arr[0].x = 0;
    arr[0].y = std::max(std::max(arr[1].y - 1, arr[1].z - 7), 0);
    arr[0].z = std::max(arr[0].z + (((int)(s[0] == tc[0])) * 5 - 4), arr[0].y);
    best = std::max(best, arr[0].z);
    arr[1].x = std::max(std::max(arr[0].x - 1, arr[0].z - 7), 0);
    arr[1].y = std::max(std::max(arr[2].y - 1, arr[2].z - 7), 0);
    arr[1].z = std::max(arr[1].z + (((int)(s[0] == tc[1])) * 5 - 4), std::max(arr[1].y, arr[1].x));
    best = std::max(best, arr[1].z);
    arr[2].x = std::max(std::max(arr[1].x - 1, arr[1].z - 7), 0);
    arr[2].y = std::max(std::max(arr[3].y - 1, arr[3].z - 7), 0);
    arr[2].z = std::max(arr[2].z + (((int)(s[0] == tc[2])) * 5 - 4), std::max(arr[2].y, arr[2].x));
    best = std::max(best, arr[2].z);
    arr[3].x = std::max(std::max(arr[2].x - 1, arr[2].z - 7), 0);
    arr[3].y = std::max(std::max(arr[4].y - 1, arr[4].z - 7), 0);
    arr[3].z = std::max(arr[3].z + (((int)(s[0] == tc[3])) * 5 - 4), std::max(arr[3].y, arr[3].x));
    best = std::max(best, arr[3].z);
    arr[4].x = std::max(std::max(arr[3].x - 1, arr[3].z - 7), 0);
    arr[4].y = std::max(std::max(arr[5].y - 1, arr[5].z - 7), 0);
    arr[4].z = std::max(arr[4].z + (((int)(s[0] == tc[4])) * 5 - 4), std::max(arr[4].y, arr[4].x));
    best = std::max(best, arr[4].z);
    arr[5].x = std::max(std::max(arr[4].x - 1, arr[4].z - 7), 0);
    arr[5].y = std::max(std::max(arr[6].y - 1, arr[6].z - 7), 0);
    arr[5].z = std::max(arr[5].z + (((int)(s[0] == tc[5])) * 5 - 4), std::max(arr[5].y, arr[5].x));
    best = std::max(best, arr[5].z);
    arr[6].x = std::max(std::max(arr[5].x - 1, arr[5].z - 7), 0);
    arr[6].y = std::max(std::max(arr[7].y - 1, arr[7].z - 7), 0);
    arr[6].z = std::max(arr[6].z + (((int)(s[0] == tc[6])) * 5 - 4), std::max(arr[6].y, arr[6].x));
    best = std::max(best, arr[6].z);
    arr[7].x = std::max(std::max(arr[6].x - 1, arr[6].z - 7), 0);
    arr[7].y = std::max(std::max(arr[8].y - 1, arr[8].z - 7), 0);
    arr[7].z = std::max(arr[7].z + (((int)(s[0] == tc[7])) * 5 - 4), std::max(arr[7].y, arr[7].x));
    best = std::max(best, arr[7].z);
    arr[8].x = std::max(std::max(arr[7].x - 1, arr[7].z - 7), 0);
    arr[8].y = std::max(std::max(arr[9].y - 1, arr[9].z - 7), 0);
    arr[8].z = std::max(arr[8].z + (((int)(s[0] == tc[8])) * 5 - 4), std::max(arr[8].y, arr[8].x));
    best = std::max(best, arr[8].z);
    arr[9].x = std::max(std::max(arr[8].x - 1, arr[8].z - 7), 0);
    arr[9].y = std::max(std::max(arr[10].y - 1, arr[10].z - 7), 0);
    arr[9].z = std::max(arr[9].z + (((int)(s[0] == tc[9])) * 5 - 4), std::max(arr[9].y, arr[9].x));
    best = std::max(best, arr[9].z);
    arr[10].x = std::max(std::max(arr[9].x - 1, arr[9].z - 7), 0);
    arr[10].y = std::max(std::max(arr[11].y - 1, arr[11].z - 7), 0);
    arr[10].z = std::max(arr[10].z + (((int)(s[0] == tc[10])) * 5 - 4), std::max(arr[10].y, arr[10].x));
    best = std::max(best, arr[10].z);
    arr[11].x = std::max(std::max(arr[10].x - 1, arr[10].z - 7), 0);
    arr[11].y = std::max(std::max(arr[12].y - 1, arr[12].z - 7), 0);
    arr[11].z = std::max(arr[11].z + (((int)(s[0] == tc[11])) * 5 - 4), std::max(arr[11].y, arr[11].x));
    best = std::max(best, arr[11].z);
    arr[12].x = std::max(std::max(arr[11].x - 1, arr[11].z - 7), 0);
    arr[12].y = 0;
    arr[12].z = std::max(arr[12].z + (((int)(s[0] == tc[12])) * 5 - 4), std::max(arr[12].y, arr[12].x));
    best = std::max(best, arr[12].z);
    arr[0].x = 0;
    arr[0].y = std::max(std::max(arr[1].y - 1, arr[1].z - 7), 0);
    arr[0].z = std::max(arr[0].z + (((int)(s[1] == tc[1])) * 5 - 4), arr[0].y);
    best = std::max(best, arr[0].z);
    arr[1].x = std::max(std::max(arr[0].x - 1, arr[0].z - 7), 0);
    arr[1].y = std::max(std::max(arr[2].y - 1, arr[2].z - 7), 0);
    arr[1].z = std::max(arr[1].z + (((int)(s[1] == tc[2])) * 5 - 4), std::max(arr[1].y, arr[1].x));
    best = std::max(best, arr[1].z);
    arr[2].x = std::max(std::max(arr[1].x - 1, arr[1].z - 7), 0);
    arr[2].y = std::max(std::max(arr[3].y - 1, arr[3].z - 7), 0);
    arr[2].z = std::max(arr[2].z + (((int)(s[1] == tc[3])) * 5 - 4), std::max(arr[2].y, arr[2].x));
    best = std::max(best, arr[2].z);
    arr[3].x = std::max(std::max(arr[2].x - 1, arr[2].z - 7), 0);
    arr[3].y = std::max(std::max(arr[4].y - 1, arr[4].z - 7), 0);
    arr[3].z = std::max(arr[3].z + (((int)(s[1] == tc[4])) * 5 - 4), std::max(arr[3].y, arr[3].x));
    best = std::max(best, arr[3].z);
    arr[4].x = std::max(std::max(arr[3].x - 1, arr[3].z - 7), 0);
    arr[4].y = std::max(std::max(arr[5].y - 1, arr[5].z - 7), 0);
    arr[4].z = std::max(arr[4].z + (((int)(s[1] == tc[5])) * 5 - 4), std::max(arr[4].y, arr[4].x));
    best = std::max(best, arr[4].z);
    arr[5].x = std::max(std::max(arr[4].x - 1, arr[4].z - 7), 0);
    arr[5].y = std::max(std::max(arr[6].y - 1, arr[6].z - 7), 0);
    arr[5].z = std::max(arr[5].z + (((int)(s[1] == tc[6])) * 5 - 4), std::max(arr[5].y, arr[5].x));
    best = std::max(best, arr[5].z);
    arr[6].x = std::max(std::max(arr[5].x - 1, arr[5].z - 7), 0);
    arr[6].y = std::max(std::max(arr[7].y - 1, arr[7].z - 7), 0);
    arr[6].z = std::max(arr[6].z + (((int)(s[1] == tc[7])) * 5 - 4), std::max(arr[6].y, arr[6].x));
    best = std::max(best, arr[6].z);
    arr[7].x = std::max(std::max(arr[6].x - 1, arr[6].z - 7), 0);
    arr[7].y = std::max(std::max(arr[8].y - 1, arr[8].z - 7), 0);
    arr[7].z = std::max(arr[7].z + (((int)(s[1] == tc[8])) * 5 - 4), std::max(arr[7].y, arr[7].x));
    best = std::max(best, arr[7].z);
    arr[8].x = std::max(std::max(arr[7].x - 1, arr[7].z - 7), 0);
    arr[8].y = std::max(std::max(arr[9].y - 1, arr[9].z - 7), 0);
    arr[8].z = std::max(arr[8].z + (((int)(s[1] == tc[9])) * 5 - 4), std::max(arr[8].y, arr[8].x));
    best = std::max(best, arr[8].z);
    arr[9].x = std::max(std::max(arr[8].x - 1, arr[8].z - 7), 0);
    arr[9].y = std::max(std::max(arr[10].y - 1, arr[10].z - 7), 0);
    arr[9].z = std::max(arr[9].z + (((int)(s[1] == tc[10])) * 5 - 4), std::max(arr[9].y, arr[9].x));
    best = std::max(best, arr[9].z);
    arr[10].x = std::max(std::max(arr[9].x - 1, arr[9].z - 7), 0);
    arr[10].y = std::max(std::max(arr[11].y - 1, arr[11].z - 7), 0);
    arr[10].z = std::max(arr[10].z + (((int)(s[1] == tc[11])) * 5 - 4), std::max(arr[10].y, arr[10].x));
    best = std::max(best, arr[10].z);
    arr[11].x = std::max(std::max(arr[10].x - 1, arr[10].z - 7), 0);
    arr[11].y = std::max(std::max(arr[12].y - 1, arr[12].z - 7), 0);
    arr[11].z = std::max(arr[11].z + (((int)(s[1] == tc[12])) * 5 - 4), std::max(arr[11].y, arr[11].x));
    best = std::max(best, arr[11].z);
    arr[12].x = std::max(std::max(arr[11].x - 1, arr[11].z - 7), 0);
    arr[12].y = 0;
    arr[12].z = std::max(arr[12].z + (((int)(s[1] == tc[13])) * 5 - 4), std::max(arr[12].y, arr[12].x));
    best = std::max(best, arr[12].z);
    arr[0].x = 0;
    arr[0].y = std::max(std::max(arr[1].y - 1, arr[1].z - 7), 0);
    arr[0].z = std::max(arr[0].z + (((int)(s[2] == tc[2])) * 5 - 4), arr[0].y);
    best = std::max(best, arr[0].z);
    arr[1].x = std::max(std::max(arr[0].x - 1, arr[0].z - 7), 0);
    arr[1].y = std::max(std::max(arr[2].y - 1, arr[2].z - 7), 0);
    arr[1].z = std::max(arr[1].z + (((int)(s[2] == tc[3])) * 5 - 4), std::max(arr[1].y, arr[1].x));
    best = std::max(best, arr[1].z);
    arr[2].x = std::max(std::max(arr[1].x - 1, arr[1].z - 7), 0);
    arr[2].y = std::max(std::max(arr[3].y - 1, arr[3].z - 7), 0);
    arr[2].z = std::max(arr[2].z + (((int)(s[2] == tc[4])) * 5 - 4), std::max(arr[2].y, arr[2].x));
    best = std::max(best, arr[2].z);
    arr[3].x = std::max(std::max(arr[2].x - 1, arr[2].z - 7), 0);
    arr[3].y = std::max(std::max(arr[4].y - 1, arr[4].z - 7), 0);
    arr[3].z = std::max(arr[3].z + (((int)(s[2] == tc[5])) * 5 - 4), std::max(arr[3].y, arr[3].x));
    best = std::max(best, arr[3].z);
    arr[4].x = std::max(std::max(arr[3].x - 1, arr[3].z - 7), 0);
    arr[4].y = std::max(std::max(arr[5].y - 1, arr[5].z - 7), 0);
    arr[4].z = std::max(arr[4].z + (((int)(s[2] == tc[6])) * 5 - 4), std::max(arr[4].y, arr[4].x));
    best = std::max(best, arr[4].z);
    arr[5].x = std::max(std::max(arr[4].x - 1, arr[4].z - 7), 0);
    arr[5].y = std::max(std::max(arr[6].y - 1, arr[6].z - 7), 0);
    arr[5].z = std::max(arr[5].z + (((int)(s[2] == tc[7])) * 5 - 4), std::max(arr[5].y, arr[5].x));
    best = std::max(best, arr[5].z);
    arr[6].x = std::max(std::max(arr[5].x - 1, arr[5].z - 7), 0);
    arr[6].y = std::max(std::max(arr[7].y - 1, arr[7].z - 7), 0);
    arr[6].z = std::max(arr[6].z + (((int)(s[2] == tc[8])) * 5 - 4), std::max(arr[6].y, arr[6].x));
    best = std::max(best, arr[6].z);
    arr[7].x = std::max(std::max(arr[6].x - 1, arr[6].z - 7), 0);
    arr[7].y = std::max(std::max(arr[8].y - 1, arr[8].z - 7), 0);
    arr[7].z = std::max(arr[7].z + (((int)(s[2] == tc[9])) * 5 - 4), std::max(arr[7].y, arr[7].x));
    best = std::max(best, arr[7].z);
    arr[8].x = std::max(std::max(arr[7].x - 1, arr[7].z - 7), 0);
    arr[8].y = std::max(std::max(arr[9].y - 1, arr[9].z - 7), 0);
    arr[8].z = std::max(arr[8].z + (((int)(s[2] == tc[10])) * 5 - 4), std::max(arr[8].y, arr[8].x));
    best = std::max(best, arr[8].z);
    arr[9].x = std::max(std::max(arr[8].x - 1, arr[8].z - 7), 0);
    arr[9].y = std::max(std::max(arr[10].y - 1, arr[10].z - 7), 0);
    arr[9].z = std::max(arr[9].z + (((int)(s[2] == tc[11])) * 5 - 4), std::max(arr[9].y, arr[9].x));
    best = std::max(best, arr[9].z);
    arr[10].x = std::max(std::max(arr[9].x - 1, arr[9].z - 7), 0);
    arr[10].y = std::max(std::max(arr[11].y - 1, arr[11].z - 7), 0);
    arr[10].z = std::max(arr[10].z + (((int)(s[2] == tc[12])) * 5 - 4), std::max(arr[10].y, arr[10].x));
    best = std::max(best, arr[10].z);
    arr[11].x = std::max(std::max(arr[10].x - 1, arr[10].z - 7), 0);
    arr[11].y = std::max(std::max(arr[12].y - 1, arr[12].z - 7), 0);
    arr[11].z = std::max(arr[11].z + (((int)(s[2] == tc[13])) * 5 - 4), std::max(arr[11].y, arr[11].x));
    best = std::max(best, arr[11].z);
    arr[12].x = std::max(std::max(arr[11].x - 1, arr[11].z - 7), 0);
    arr[12].y = 0;
    arr[12].z = std::max(arr[12].z + (((int)(s[2] == tc[14])) * 5 - 4), std::max(arr[12].y, arr[12].x));
    best = std::max(best, arr[12].z);
    arr[0].x = 0;
    arr[0].y = std::max(std::max(arr[1].y - 1, arr[1].z - 7), 0);
    arr[0].z = std::max(arr[0].z + (((int)(s[3] == tc[3])) * 5 - 4), arr[0].y);
    best = std::max(best, arr[0].z);
    arr[1].x = std::max(std::max(arr[0].x - 1, arr[0].z - 7), 0);
    arr[1].y = std::max(std::max(arr[2].y - 1, arr[2].z - 7), 0);
    arr[1].z = std::max(arr[1].z + (((int)(s[3] == tc[4])) * 5 - 4), std::max(arr[1].y, arr[1].x));
    best = std::max(best, arr[1].z);
    arr[2].x = std::max(std::max(arr[1].x - 1, arr[1].z - 7), 0);
    arr[2].y = std::max(std::max(arr[3].y - 1, arr[3].z - 7), 0);
    arr[2].z = std::max(arr[2].z + (((int)(s[3] == tc[5])) * 5 - 4), std::max(arr[2].y, arr[2].x));
    best = std::max(best, arr[2].z);
    arr[3].x = std::max(std::max(arr[2].x - 1, arr[2].z - 7), 0);
    arr[3].y = std::max(std::max(arr[4].y - 1, arr[4].z - 7), 0);
    arr[3].z = std::max(arr[3].z + (((int)(s[3] == tc[6])) * 5 - 4), std::max(arr[3].y, arr[3].x));
    best = std::max(best, arr[3].z);
    arr[4].x = std::max(std::max(arr[3].x - 1, arr[3].z - 7), 0);
    arr[4].y = std::max(std::max(arr[5].y - 1, arr[5].z - 7), 0);
    arr[4].z = std::max(arr[4].z + (((int)(s[3] == tc[7])) * 5 - 4), std::max(arr[4].y, arr[4].x));
    best = std::max(best, arr[4].z);
    arr[5].x = std::max(std::max(arr[4].x - 1, arr[4].z - 7), 0);
    arr[5].y = std::max(std::max(arr[6].y - 1, arr[6].z - 7), 0);
    arr[5].z = std::max(arr[5].z + (((int)(s[3] == tc[8])) * 5 - 4), std::max(arr[5].y, arr[5].x));
    best = std::max(best, arr[5].z);
    arr[6].x = std::max(std::max(arr[5].x - 1, arr[5].z - 7), 0);
    arr[6].y = std::max(std::max(arr[7].y - 1, arr[7].z - 7), 0);
    arr[6].z = std::max(arr[6].z + (((int)(s[3] == tc[9])) * 5 - 4), std::max(arr[6].y, arr[6].x));
    best = std::max(best, arr[6].z);
    arr[7].x = std::max(std::max(arr[6].x - 1, arr[6].z - 7), 0);
    arr[7].y = std::max(std::max(arr[8].y - 1, arr[8].z - 7), 0);
    arr[7].z = std::max(arr[7].z + (((int)(s[3] == tc[10])) * 5 - 4), std::max(arr[7].y, arr[7].x));
    best = std::max(best, arr[7].z);
    arr[8].x = std::max(std::max(arr[7].x - 1, arr[7].z - 7), 0);
    arr[8].y = std::max(std::max(arr[9].y - 1, arr[9].z - 7), 0);
    arr[8].z = std::max(arr[8].z + (((int)(s[3] == tc[11])) * 5 - 4), std::max(arr[8].y, arr[8].x));
    best = std::max(best, arr[8].z);
    arr[9].x = std::max(std::max(arr[8].x - 1, arr[8].z - 7), 0);
    arr[9].y = std::max(std::max(arr[10].y - 1, arr[10].z - 7), 0);
    arr[9].z = std::max(arr[9].z + (((int)(s[3] == tc[12])) * 5 - 4), std::max(arr[9].y, arr[9].x));
    best = std::max(best, arr[9].z);
    arr[10].x = std::max(std::max(arr[9].x - 1, arr[9].z - 7), 0);
    arr[10].y = std::max(std::max(arr[11].y - 1, arr[11].z - 7), 0);
    arr[10].z = std::max(arr[10].z + (((int)(s[3] == tc[13])) * 5 - 4), std::max(arr[10].y, arr[10].x));
    best = std::max(best, arr[10].z);
    arr[11].x = std::max(std::max(arr[10].x - 1, arr[10].z - 7), 0);
    arr[11].y = std::max(std::max(arr[12].y - 1, arr[12].z - 7), 0);
    arr[11].z = std::max(arr[11].z + (((int)(s[3] == tc[14])) * 5 - 4), std::max(arr[11].y, arr[11].x));
    best = std::max(best, arr[11].z);
    arr[12].x = std::max(std::max(arr[11].x - 1, arr[11].z - 7), 0);
    arr[12].y = 0;
    arr[12].z = std::max(arr[12].z + (((int)(s[3] == tc[15])) * 5 - 4), std::max(arr[12].y, arr[12].x));
    best = std::max(best, arr[12].z);
    arr[0].x = 0;
    arr[0].y = std::max(std::max(arr[1].y - 1, arr[1].z - 7), 0);
    arr[0].z = std::max(arr[0].z + (((int)(s[4] == tc[4])) * 5 - 4), arr[0].y);
    best = std::max(best, arr[0].z);
    arr[1].x = std::max(std::max(arr[0].x - 1, arr[0].z - 7), 0);
    arr[1].y = std::max(std::max(arr[2].y - 1, arr[2].z - 7), 0);
    arr[1].z = std::max(arr[1].z + (((int)(s[4] == tc[5])) * 5 - 4), std::max(arr[1].y, arr[1].x));
    best = std::max(best, arr[1].z);
    arr[2].x = std::max(std::max(arr[1].x - 1, arr[1].z - 7), 0);
    arr[2].y = std::max(std::max(arr[3].y - 1, arr[3].z - 7), 0);
    arr[2].z = std::max(arr[2].z + (((int)(s[4] == tc[6])) * 5 - 4), std::max(arr[2].y, arr[2].x));
    best = std::max(best, arr[2].z);
    arr[3].x = std::max(std::max(arr[2].x - 1, arr[2].z - 7), 0);
    arr[3].y = std::max(std::max(arr[4].y - 1, arr[4].z - 7), 0);
    arr[3].z = std::max(arr[3].z + (((int)(s[4] == tc[7])) * 5 - 4), std::max(arr[3].y, arr[3].x));
    best = std::max(best, arr[3].z);
    arr[4].x = std::max(std::max(arr[3].x - 1, arr[3].z - 7), 0);
    arr[4].y = std::max(std::max(arr[5].y - 1, arr[5].z - 7), 0);
    arr[4].z = std::max(arr[4].z + (((int)(s[4] == tc[8])) * 5 - 4), std::max(arr[4].y, arr[4].x));
    best = std::max(best, arr[4].z);
    arr[5].x = std::max(std::max(arr[4].x - 1, arr[4].z - 7), 0);
    arr[5].y = std::max(std::max(arr[6].y - 1, arr[6].z - 7), 0);
    arr[5].z = std::max(arr[5].z + (((int)(s[4] == tc[9])) * 5 - 4), std::max(arr[5].y, arr[5].x));
    best = std::max(best, arr[5].z);
    arr[6].x = std::max(std::max(arr[5].x - 1, arr[5].z - 7), 0);
    arr[6].y = std::max(std::max(arr[7].y - 1, arr[7].z - 7), 0);
    arr[6].z = std::max(arr[6].z + (((int)(s[4] == tc[10])) * 5 - 4), std::max(arr[6].y, arr[6].x));
    best = std::max(best, arr[6].z);
    arr[7].x = std::max(std::max(arr[6].x - 1, arr[6].z - 7), 0);
    arr[7].y = std::max(std::max(arr[8].y - 1, arr[8].z - 7), 0);
    arr[7].z = std::max(arr[7].z + (((int)(s[4] == tc[11])) * 5 - 4), std::max(arr[7].y, arr[7].x));
    best = std::max(best, arr[7].z);
    arr[8].x = std::max(std::max(arr[7].x - 1, arr[7].z - 7), 0);
    arr[8].y = std::max(std::max(arr[9].y - 1, arr[9].z - 7), 0);
    arr[8].z = std::max(arr[8].z + (((int)(s[4] == tc[12])) * 5 - 4), std::max(arr[8].y, arr[8].x));
    best = std::max(best, arr[8].z);
    arr[9].x = std::max(std::max(arr[8].x - 1, arr[8].z - 7), 0);
    arr[9].y = std::max(std::max(arr[10].y - 1, arr[10].z - 7), 0);
    arr[9].z = std::max(arr[9].z + (((int)(s[4] == tc[13])) * 5 - 4), std::max(arr[9].y, arr[9].x));
    best = std::max(best, arr[9].z);
    arr[10].x = std::max(std::max(arr[9].x - 1, arr[9].z - 7), 0);
    arr[10].y = std::max(std::max(arr[11].y - 1, arr[11].z - 7), 0);
    arr[10].z = std::max(arr[10].z + (((int)(s[4] == tc[14])) * 5 - 4), std::max(arr[10].y, arr[10].x));
    best = std::max(best, arr[10].z);
    arr[11].x = std::max(std::max(arr[10].x - 1, arr[10].z - 7), 0);
    arr[11].y = std::max(std::max(arr[12].y - 1, arr[12].z - 7), 0);
    arr[11].z = std::max(arr[11].z + (((int)(s[4] == tc[15])) * 5 - 4), std::max(arr[11].y, arr[11].x));
    best = std::max(best, arr[11].z);
    arr[12].x = std::max(std::max(arr[11].x - 1, arr[11].z - 7), 0);
    arr[12].y = 0;
    arr[12].z = std::max(arr[12].z + (((int)(s[4] == tc[16])) * 5 - 4), std::max(arr[12].y, arr[12].x));
    best = std::max(best, arr[12].z);
	
	//std::cout << "SW: s = " << (int)best << std::endl;
	
    return (int)best;
}
